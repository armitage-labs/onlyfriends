{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bondageCurveAddress",
          "type": "address"
        }
      ],
      "name": "BondageCurveCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "protocolTreasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdcAddress",
          "type": "address"
        }
      ],
      "name": "deployNewBondageCurve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa334f57671339ccf0b6901a5ecf20e130cc4af22ed94ae93d7a2ada3e6cdb2dc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2854498",
    "logsBloom": "0x
    "blockHash": "0xdaf70fb133217c514f4e7e3aa05d07f948a58478a565996a70f6e43f9ee29181",
    "transactionHash": "0xa334f57671339ccf0b6901a5ecf20e130cc4af22ed94ae93d7a2ada3e6cdb2dc",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2854498",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4bf50edafd99422d0edcf84b99d2571d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondageCurveAddress\",\"type\":\"address\"}],\"name\":\"BondageCurveCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"deployNewBondageCurve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondageCurveFactory.sol\":\"BondageCurveFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"contracts/BondageCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20Burnable } from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport { ERC20Pausable } from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\n\\ncontract BondageCurve is ERC20, ERC20Burnable, ERC20Pausable, Ownable {\\n\\tuint256 public protocolTreasuryBalance;\\n\\tuint256 public contentCreatorBalance;\\n\\tuint256 public totalContractBalance;\\n\\tuint256 public totalMintedTokens;\\n\\tuint256 public constant reserveRatio = 1000000; // Reserve ratio in ppm (parts per million)\\n\\tuint256 public constant supply = 1000000; // Total supply of tokens\\n\\tuint256 public constant fixedSubscriptionPrice = 25; // in usdc\\n\\taddress public contentCreatorAddress;\\n\\tIERC20 public usdc;\\n\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress initialOwner,\\n\\t\\taddress usdcAddress,\\n\\t\\taddress _contentCreatorAddress\\n\\t) ERC20(name, symbol) Ownable(initialOwner) {\\n\\t\\tusdc = IERC20(usdcAddress);\\n\\t\\tcontentCreatorAddress = _contentCreatorAddress;\\n\\t}\\n\\n\\tmodifier onlyCreator() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == contentCreatorAddress,\\n\\t\\t\\t\\\"Only creator address can call this function\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _update(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal override(ERC20, ERC20Pausable) onlyOwner {\\n\\t\\tsuper._update(from, to, value);\\n\\t}\\n\\n\\tevent TokensPurchased(\\n\\t\\taddress indexed buyer,\\n\\t\\tuint256 amountSpent,\\n\\t\\tuint256 tokensMinted\\n\\t);\\n\\n\\tevent SubscriptionPurchased(address indexed buyer);\\n\\n\\tevent TokensBurned(uint256 amountBurned);\\n\\n\\tfunction pause() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction creatorBalanceWithdrawal() external onlyCreator {\\n\\t\\trequire(\\n\\t\\t\\tcontentCreatorBalance > 0,\\n\\t\\t\\t\\\"Content Creator balance must be greater than 0 to withdraw\\\"\\n\\t\\t);\\n\\t\\tusdc.transfer(msg.sender, contentCreatorBalance);\\n\\t\\tcontentCreatorBalance = 0;\\n\\t\\ttotalContractBalance = totalContractBalance - contentCreatorBalance;\\n\\t}\\n\\n\\tfunction protocolTreasuryBalanceWithdrawal() external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tprotocolTreasuryBalance > 0,\\n\\t\\t\\t\\\"Protocol treasury balance must be greater than 0 to withdraw\\\"\\n\\t\\t);\\n\\t\\tusdc.transfer(msg.sender, protocolTreasuryBalance);\\n\\t\\tprotocolTreasuryBalance = 0;\\n\\t\\ttotalContractBalance = totalContractBalance - protocolTreasuryBalance;\\n\\t}\\n\\n\\tfunction purchaseTokens(uint256 usdcAmount) public {\\n\\t\\trequire(\\n\\t\\t\\tusdc.balanceOf(msg.sender) > 0,\\n\\t\\t\\t\\\"Must have USDc to purchase tokens\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tusdc.allowance(msg.sender, address(this)) > usdcAmount,\\n\\t\\t\\t\\\"Not enough allowance to purchase tokens\\\"\\n\\t\\t);\\n\\n\\t\\tusdc.transferFrom(msg.sender, address(this), usdcAmount);\\n\\n\\t\\tuint256 tokensToMint = calculatePurchaseReturnPrice(usdcAmount);\\n\\t\\tprotocolTreasuryBalance += (usdcAmount * 20) / 100;\\n\\t\\tcontentCreatorBalance += (usdcAmount * 80) / 100;\\n\\t\\ttotalContractBalance += usdcAmount;\\n\\t\\ttotalMintedTokens += tokensToMint;\\n\\t\\t_mint(msg.sender, tokensToMint);\\n\\n\\t\\temit TokensPurchased(msg.sender, usdcAmount, tokensToMint);\\n\\t}\\n\\n\\tfunction calculatePurchaseReturnPrice(\\n\\t\\tuint256 usdcAmount\\n\\t) public view returns (uint256) {\\n\\t\\treturn (usdcAmount * reserveRatio) / (totalMintedTokens + supply);\\n\\t}\\n\\n\\tfunction purchaseSubscription() public {\\n\\t\\tuint256 subscriptionPriceInTokens = calculateSubscriptionPrice();\\n\\n\\t\\trequire(\\n\\t\\t\\tthis.balanceOf(msg.sender) >= subscriptionPriceInTokens,\\n\\t\\t\\t\\\"Not enough tokens to purchase subscription\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tthis.allowance(msg.sender, address(this)) >=\\n\\t\\t\\t\\tsubscriptionPriceInTokens,\\n\\t\\t\\t\\\"Not enough allowance to purchase subscription\\\"\\n\\t\\t);\\n\\n\\t\\t_burn(msg.sender, subscriptionPriceInTokens);\\n\\n\\t\\temit TokensBurned(subscriptionPriceInTokens);\\n\\t\\temit SubscriptionPurchased(msg.sender);\\n\\t}\\n\\n\\tfunction calculateSubscriptionPrice() public view returns (uint256) {\\n\\t\\tuint256 subscriptionPriceInTokens = calculatePurchaseReturnPrice(\\n\\t\\t\\tfixedSubscriptionPrice\\n\\t\\t);\\n\\t\\treturn subscriptionPriceInTokens;\\n\\t}\\n}\\n\",\"keccak256\":\"0x542a099ce3d1dd7fcd1537d3aedd4ffc9aeaa6b3d7300595b70be143db2a0962\",\"license\":\"MIT\"},\"contracts/BondageCurveFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./BondageCurve.sol\\\";\\n\\ncontract BondageCurveFactory {\\n\\tevent BondageCurveCreated(address bondageCurveAddress);\\n\\n\\tfunction deployNewBondageCurve(\\n\\t\\tstring calldata name,\\n\\t\\tstring calldata symbol,\\n\\t\\taddress protocolTreasuryAddress,\\n\\t\\taddress usdcAddress\\n\\t) public returns (address) {\\n\\t\\tBondageCurve newBondageCurve = new BondageCurve(\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tprotocolTreasuryAddress,\\n\\t\\t\\tusdcAddress,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t\\temit BondageCurveCreated(address(newBondageCurve));\\n\\n\\t\\treturn address(newBondageCurve);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9d50b1aae1bdfd0b343502e3e54fc7f169bd656947a451c98c64dc2c330b4698\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132e4806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063ecffb6111462000033575b600080fd5b6200005160048036038101906200004b9190620001e5565b62000069565b604051620000609190620002ae565b60405180910390f35b600080878787878787336040516200008190620000fa565b6200009397969594939291906200032f565b604051809103906000f080158015620000b0573d6000803e3d6000fd5b5090507f51e7c9cd6c21ba80610fc50fb32147ca5f37882647e01d080d7d6d1a7f138a2c81604051620000e49190620002ae565b60405180910390a1809150509695505050505050565b612f10806200039f83390190565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126200013a576200013962000112565b5b8235905067ffffffffffffffff8111156200015a576200015962000117565b5b6020830191508360018202830111156200017957620001786200011c565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ad8262000180565b9050919050565b620001bf81620001a0565b8114620001cb57600080fd5b50565b600081359050620001df81620001b4565b92915050565b6000806000806000806080878903121562000205576200020462000108565b5b600087013567ffffffffffffffff8111156200022657620002256200010d565b5b6200023489828a0162000121565b9650965050602087013567ffffffffffffffff8111156200025a57620002596200010d565b5b6200026889828a0162000121565b945094505060406200027d89828a01620001ce565b92505060606200029089828a01620001ce565b9150509295509295509295565b620002a881620001a0565b82525050565b6000602082019050620002c560008301846200029d565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006200030a8385620002cb565b935062000319838584620002dc565b6200032483620002eb565b840190509392505050565b600060a08201905081810360008301526200034c81898b620002fc565b9050818103602083015262000363818789620002fc565b90506200037460408301866200029d565b6200038360608301856200029d565b6200039260808301846200029d565b9897505050505050505056fe60806040523480156200001157600080fd5b5060405162002f1038038062002f1083398181016040528101906200003791906200044d565b82858581600390816200004b91906200075e565b5080600490816200005d91906200075e565b5050506000600560006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000f05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000e7919062000856565b60405180910390fd5b62000101816200018f60201b60201c565b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000873565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002be8262000273565b810181811067ffffffffffffffff82111715620002e057620002df62000284565b5b80604052505050565b6000620002f562000255565b9050620003038282620002b3565b919050565b600067ffffffffffffffff82111562000326576200032562000284565b5b620003318262000273565b9050602081019050919050565b60005b838110156200035e57808201518184015260208101905062000341565b60008484015250505050565b6000620003816200037b8462000308565b620002e9565b905082815260208101848484011115620003a0576200039f6200026e565b5b620003ad8482856200033e565b509392505050565b600082601f830112620003cd57620003cc62000269565b5b8151620003df8482602086016200036a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200041582620003e8565b9050919050565b620004278162000408565b81146200043357600080fd5b50565b60008151905062000447816200041c565b92915050565b600080600080600060a086880312156200046c576200046b6200025f565b5b600086015167ffffffffffffffff8111156200048d576200048c62000264565b5b6200049b88828901620003b5565b955050602086015167ffffffffffffffff811115620004bf57620004be62000264565b5b620004cd88828901620003b5565b9450506040620004e08882890162000436565b9350506060620004f38882890162000436565b9250506080620005068882890162000436565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200056657607f821691505b6020821081036200057c576200057b6200051e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005a7565b620005f28683620005a7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200063f6200063962000633846200060a565b62000614565b6200060a565b9050919050565b6000819050919050565b6200065b836200061e565b620006736200066a8262000646565b848454620005b4565b825550505050565b600090565b6200068a6200067b565b6200069781848462000650565b505050565b5b81811015620006bf57620006b360008262000680565b6001810190506200069d565b5050565b601f8211156200070e57620006d88162000582565b620006e38462000597565b81016020851015620006f3578190505b6200070b620007028562000597565b8301826200069c565b50505b505050565b600082821c905092915050565b6000620007336000198460080262000713565b1980831691505092915050565b60006200074e838362000720565b9150826002028217905092915050565b620007698262000513565b67ffffffffffffffff81111562000785576200078462000284565b5b6200079182546200054d565b6200079e828285620006c3565b600060209050601f831160018114620007d65760008415620007c1578287015190505b620007cd858262000740565b8655506200083d565b601f198416620007e68662000582565b60005b828110156200081057848901518255600182019150602085019450602081019050620007e9565b868310156200083057848901516200082c601f89168262000720565b8355505b6001600288020188555050505b505050505050565b620008508162000408565b82525050565b60006020820190506200086d600083018462000845565b92915050565b61268d80620008836000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637b97008d1161010f578063a9059cbb116100a2578063dd62ed3e11610071578063dd62ed3e1461052d578063e69e8fe71461055d578063f2fde38b1461057b578063fce3cc7f14610597576101f0565b8063a9059cbb146104cb578063bac03cd7146104fb578063db1bed2214610519578063db242e6314610523576101f0565b80638e32e316116100de5780638e32e3161461045357806395d89b41146104715780639ad57e251461048f5780639dfc16a3146104ad576101f0565b80637b97008d146103f15780638456cb591461040d578063863eb85c146104175780638da5cb5b14610435576101f0565b80633f4ba83a1161018757806370a082311161015657806370a082311461037d578063715018a6146103ad57806373415dfb146103b757806379cc6790146103d5576101f0565b80633f4ba83a1461030957806342966c68146103135780635783d4a81461032f5780635c975abb1461035f576101f0565b806318160ddd116101c357806318160ddd1461027f57806323b872dd1461029d578063313ce567146102cd5780633e413bee146102eb576101f0565b8063047fc9aa146101f557806306fdde0314610213578063095ea7b3146102315780630c7d5cd814610261575b600080fd5b6101fd6105a1565b60405161020a9190611ba2565b60405180910390f35b61021b6105a8565b6040516102289190611c4d565b60405180910390f35b61024b60048036038101906102469190611cfe565b61063a565b6040516102589190611d59565b60405180910390f35b61026961065d565b6040516102769190611ba2565b60405180910390f35b610287610664565b6040516102949190611ba2565b60405180910390f35b6102b760048036038101906102b29190611d74565b61066e565b6040516102c49190611d59565b60405180910390f35b6102d561069d565b6040516102e29190611de3565b60405180910390f35b6102f36106a6565b6040516103009190611e5d565b60405180910390f35b6103116106cc565b005b61032d60048036038101906103289190611e78565b6106de565b005b61034960048036038101906103449190611e78565b6106f2565b6040516103569190611ba2565b60405180910390f35b610367610725565b6040516103749190611d59565b60405180910390f35b61039760048036038101906103929190611ea5565b61073c565b6040516103a49190611ba2565b60405180910390f35b6103b5610784565b005b6103bf610798565b6040516103cc9190611ba2565b60405180910390f35b6103ef60048036038101906103ea9190611cfe565b61079d565b005b61040b60048036038101906104069190611e78565b6107bd565b005b610415610b1c565b005b61041f610b2e565b60405161042c9190611ee1565b60405180910390f35b61043d610b54565b60405161044a9190611ee1565b60405180910390f35b61045b610b7e565b6040516104689190611ba2565b60405180910390f35b610479610b84565b6040516104869190611c4d565b60405180910390f35b610497610c16565b6040516104a49190611ba2565b60405180910390f35b6104b5610c1c565b6040516104c29190611ba2565b60405180910390f35b6104e560048036038101906104e09190611cfe565b610c32565b6040516104f29190611d59565b60405180910390f35b610503610c55565b6040516105109190611ba2565b60405180910390f35b610521610c5b565b005b61052b610e68565b005b61054760048036038101906105429190611efc565b610f78565b6040516105549190611ba2565b60405180910390f35b610565610fff565b6040516105729190611ba2565b60405180910390f35b61059560048036038101906105909190611ea5565b611005565b005b61059f61108b565b005b620f424081565b6060600380546105b790611f6b565b80601f01602080910402602001604051908101604052809291908181526020018280546105e390611f6b565b80156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b5050505050905090565b600080610645611223565b905061065281858561122b565b600191505092915050565b620f424081565b6000600254905090565b600080610679611223565b905061068685828561123d565b6106918585856112d1565b60019150509392505050565b60006012905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106d46113c5565b6106dc61144c565b565b6106ef6106e9611223565b826114af565b50565b6000620f42406009546107059190611fcb565b620f4240836107149190611fff565b61071e9190612070565b9050919050565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61078c6113c5565b6107966000611531565b565b601981565b6107af826107a9611223565b8361123d565b6107b982826114af565b5050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161081a9190611ee1565b602060405180830381865afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b91906120b6565b1161089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290612155565b60405180910390fd5b80600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016108f9929190612175565b602060405180830381865afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a91906120b6565b1161097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190612210565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016109d993929190612230565b6020604051808303816000875af11580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190612293565b506000610a28826106f2565b90506064601483610a399190611fff565b610a439190612070565b60066000828254610a549190611fcb565b925050819055506064605083610a6a9190611fff565b610a749190612070565b60076000828254610a859190611fcb565b925050819055508160086000828254610a9e9190611fcb565b925050819055508060096000828254610ab79190611fcb565b92505081905550610ac833826115f7565b3373ffffffffffffffffffffffffffffffffffffffff167f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f338383604051610b109291906122c0565b60405180910390a25050565b610b246113c5565b610b2c611679565b565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60095481565b606060048054610b9390611f6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbf90611f6b565b8015610c0c5780601f10610be157610100808354040283529160200191610c0c565b820191906000526020600020905b815481529060010190602001808311610bef57829003601f168201915b5050505050905090565b60075481565b600080610c2960196106f2565b90508091505090565b600080610c3d611223565b9050610c4a8185856112d1565b600191505092915050565b60085481565b6000610c65610c1c565b9050803073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ca19190611ee1565b602060405180830381865afa158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce291906120b6565b1015610d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1a9061235b565b60405180910390fd5b803073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d5f929190612175565b602060405180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906120b6565b1015610de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd8906123ed565b60405180910390fd5b610deb33826114af565b7f6ef4855b666dcc7884561072e4358b28dfe01feb1b7f4dcebc00e62d50394ac781604051610e1a9190611ba2565b60405180910390a13373ffffffffffffffffffffffffffffffffffffffff167f5671526f14382102dd869527930595699f52feafde5a004f82d18b4c5cdc3ab960405160405180910390a250565b610e706113c5565b600060065411610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac9061247f565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336006546040518363ffffffff1660e01b8152600401610f1492919061249f565b6020604051808303816000875af1158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190612293565b506000600681905550600654600854610f7091906124c8565b600881905550565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60065481565b61100d6113c5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361107f5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016110769190611ee1565b60405180910390fd5b61108881611531565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111129061256e565b60405180910390fd5b600060075411611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790612600565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336007546040518363ffffffff1660e01b81526004016111bf92919061249f565b6020604051808303816000875af11580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190612293565b50600060078190555060075460085461121b91906124c8565b600881905550565b600033905090565b61123883838360016116dc565b505050565b60006112498484610f78565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112cb57818110156112bb578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016112b293929190612620565b60405180910390fd5b6112ca848484840360006116dc565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113435760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161133a9190611ee1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113b55760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016113ac9190611ee1565b60405180910390fd5b6113c08383836118b3565b505050565b6113cd611223565b73ffffffffffffffffffffffffffffffffffffffff166113eb610b54565b73ffffffffffffffffffffffffffffffffffffffff161461144a5761140e611223565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114419190611ee1565b60405180910390fd5b565b6114546118cb565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611498611223565b6040516114a59190611ee1565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115215760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016115189190611ee1565b60405180910390fd5b61152d826000836118b3565b5050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116695760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016116609190611ee1565b60405180910390fd5b611675600083836118b3565b5050565b61168161190b565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116c5611223565b6040516116d29190611ee1565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361174e5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016117459190611ee1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117c05760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016117b79190611ee1565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156118ad578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516118a49190611ba2565b60405180910390a35b50505050565b6118bb6113c5565b6118c683838361194c565b505050565b6118d3610725565b611909576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611913610725565b1561194a576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61195461190b565b61195f838383611964565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119b65780600260008282546119aa9190611fcb565b92505081905550611a89565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a42578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611a3993929190612620565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ad25780600260008282540392505081905550611b1f565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611b7c9190611ba2565b60405180910390a3505050565b6000819050919050565b611b9c81611b89565b82525050565b6000602082019050611bb76000830184611b93565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bf7578082015181840152602081019050611bdc565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c1f82611bbd565b611c298185611bc8565b9350611c39818560208601611bd9565b611c4281611c03565b840191505092915050565b60006020820190508181036000830152611c678184611c14565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9f82611c74565b9050919050565b611caf81611c94565b8114611cba57600080fd5b50565b600081359050611ccc81611ca6565b92915050565b611cdb81611b89565b8114611ce657600080fd5b50565b600081359050611cf881611cd2565b92915050565b60008060408385031215611d1557611d14611c6f565b5b6000611d2385828601611cbd565b9250506020611d3485828601611ce9565b9150509250929050565b60008115159050919050565b611d5381611d3e565b82525050565b6000602082019050611d6e6000830184611d4a565b92915050565b600080600060608486031215611d8d57611d8c611c6f565b5b6000611d9b86828701611cbd565b9350506020611dac86828701611cbd565b9250506040611dbd86828701611ce9565b9150509250925092565b600060ff82169050919050565b611ddd81611dc7565b82525050565b6000602082019050611df86000830184611dd4565b92915050565b6000819050919050565b6000611e23611e1e611e1984611c74565b611dfe565b611c74565b9050919050565b6000611e3582611e08565b9050919050565b6000611e4782611e2a565b9050919050565b611e5781611e3c565b82525050565b6000602082019050611e726000830184611e4e565b92915050565b600060208284031215611e8e57611e8d611c6f565b5b6000611e9c84828501611ce9565b91505092915050565b600060208284031215611ebb57611eba611c6f565b5b6000611ec984828501611cbd565b91505092915050565b611edb81611c94565b82525050565b6000602082019050611ef66000830184611ed2565b92915050565b60008060408385031215611f1357611f12611c6f565b5b6000611f2185828601611cbd565b9250506020611f3285828601611cbd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f8357607f821691505b602082108103611f9657611f95611f3c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fd682611b89565b9150611fe183611b89565b9250828201905080821115611ff957611ff8611f9c565b5b92915050565b600061200a82611b89565b915061201583611b89565b925082820261202381611b89565b9150828204841483151761203a57612039611f9c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061207b82611b89565b915061208683611b89565b92508261209657612095612041565b5b828204905092915050565b6000815190506120b081611cd2565b92915050565b6000602082840312156120cc576120cb611c6f565b5b60006120da848285016120a1565b91505092915050565b7f4d7573742068617665205553446320746f20707572636861736520746f6b656e60008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061213f602183611bc8565b915061214a826120e3565b604082019050919050565b6000602082019050818103600083015261216e81612132565b9050919050565b600060408201905061218a6000830185611ed2565b6121976020830184611ed2565b9392505050565b7f4e6f7420656e6f75676820616c6c6f77616e636520746f20707572636861736560008201527f20746f6b656e7300000000000000000000000000000000000000000000000000602082015250565b60006121fa602783611bc8565b91506122058261219e565b604082019050919050565b60006020820190508181036000830152612229816121ed565b9050919050565b60006060820190506122456000830186611ed2565b6122526020830185611ed2565b61225f6040830184611b93565b949350505050565b61227081611d3e565b811461227b57600080fd5b50565b60008151905061228d81612267565b92915050565b6000602082840312156122a9576122a8611c6f565b5b60006122b78482850161227e565b91505092915050565b60006040820190506122d56000830185611b93565b6122e26020830184611b93565b9392505050565b7f4e6f7420656e6f75676820746f6b656e7320746f20707572636861736520737560008201527f62736372697074696f6e00000000000000000000000000000000000000000000602082015250565b6000612345602a83611bc8565b9150612350826122e9565b604082019050919050565b6000602082019050818103600083015261237481612338565b9050919050565b7f4e6f7420656e6f75676820616c6c6f77616e636520746f20707572636861736560008201527f20737562736372697074696f6e00000000000000000000000000000000000000602082015250565b60006123d7602d83611bc8565b91506123e28261237b565b604082019050919050565b60006020820190508181036000830152612406816123ca565b9050919050565b7f50726f746f636f6c2074726561737572792062616c616e6365206d757374206260008201527f652067726561746572207468616e203020746f20776974686472617700000000602082015250565b6000612469603c83611bc8565b91506124748261240d565b604082019050919050565b600060208201905081810360008301526124988161245c565b9050919050565b60006040820190506124b46000830185611ed2565b6124c16020830184611b93565b9392505050565b60006124d382611b89565b91506124de83611b89565b92508282039050818111156124f6576124f5611f9c565b5b92915050565b7f4f6e6c792063726561746f7220616464726573732063616e2063616c6c20746860008201527f69732066756e6374696f6e000000000000000000000000000000000000000000602082015250565b6000612558602b83611bc8565b9150612563826124fc565b604082019050919050565b600060208201905081810360008301526125878161254b565b9050919050565b7f436f6e74656e742043726561746f722062616c616e6365206d7573742062652060008201527f67726561746572207468616e203020746f207769746864726177000000000000602082015250565b60006125ea603a83611bc8565b91506125f58261258e565b604082019050919050565b60006020820190508181036000830152612619816125dd565b9050919050565b60006060820190506126356000830186611ed2565b6126426020830185611b93565b61264f6040830184611b93565b94935050505056fea2646970667358221220fdac02a5f511c2193f6d2d6f51174c67802bc15840e3c47d692198802f5709f964736f6c63430008140033a2646970667358221220a82792acf94a328893d1102c9d144d1b0ef331375ed7b763962268c7c0b3dd5f64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063ecffb6111462000033575b600080fd5b6200005160048036038101906200004b9190620001e5565b62000069565b604051620000609190620002ae565b60405180910390f35b600080878787878787336040516200008190620000fa565b6200009397969594939291906200032f565b604051809103906000f080158015620000b0573d6000803e3d6000fd5b5090507f51e7c9cd6c21ba80610fc50fb32147ca5f37882647e01d080d7d6d1a7f138a2c81604051620000e49190620002ae565b60405180910390a1809150509695505050505050565b612f10806200039f83390190565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126200013a576200013962000112565b5b8235905067ffffffffffffffff8111156200015a576200015962000117565b5b6020830191508360018202830111156200017957620001786200011c565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ad8262000180565b9050919050565b620001bf81620001a0565b8114620001cb57600080fd5b50565b600081359050620001df81620001b4565b92915050565b6000806000806000806080878903121562000205576200020462000108565b5b600087013567ffffffffffffffff8111156200022657620002256200010d565b5b6200023489828a0162000121565b9650965050602087013567ffffffffffffffff8111156200025a57620002596200010d565b5b6200026889828a0162000121565b945094505060406200027d89828a01620001ce565b92505060606200029089828a01620001ce565b9150509295509295509295565b620002a881620001a0565b82525050565b6000602082019050620002c560008301846200029d565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006200030a8385620002cb565b935062000319838584620002dc565b6200032483620002eb565b840190509392505050565b600060a08201905081810360008301526200034c81898b620002fc565b9050818103602083015262000363818789620002fc565b90506200037460408301866200029d565b6200038360608301856200029d565b6200039260808301846200029d565b9897505050505050505056fe60806040523480156200001157600080fd5b5060405162002f1038038062002f1083398181016040528101906200003791906200044d565b82858581600390816200004b91906200075e565b5080600490816200005d91906200075e565b5050506000600560006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000f05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000e7919062000856565b60405180910390fd5b62000101816200018f60201b60201c565b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000873565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002be8262000273565b810181811067ffffffffffffffff82111715620002e057620002df62000284565b5b80604052505050565b6000620002f562000255565b9050620003038282620002b3565b919050565b600067ffffffffffffffff82111562000326576200032562000284565b5b620003318262000273565b9050602081019050919050565b60005b838110156200035e57808201518184015260208101905062000341565b60008484015250505050565b6000620003816200037b8462000308565b620002e9565b905082815260208101848484011115620003a0576200039f6200026e565b5b620003ad8482856200033e565b509392505050565b600082601f830112620003cd57620003cc62000269565b5b8151620003df8482602086016200036a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200041582620003e8565b9050919050565b620004278162000408565b81146200043357600080fd5b50565b60008151905062000447816200041c565b92915050565b600080600080600060a086880312156200046c576200046b6200025f565b5b600086015167ffffffffffffffff8111156200048d576200048c62000264565b5b6200049b88828901620003b5565b955050602086015167ffffffffffffffff811115620004bf57620004be62000264565b5b620004cd88828901620003b5565b9450506040620004e08882890162000436565b9350506060620004f38882890162000436565b9250506080620005068882890162000436565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200056657607f821691505b6020821081036200057c576200057b6200051e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005a7565b620005f28683620005a7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200063f6200063962000633846200060a565b62000614565b6200060a565b9050919050565b6000819050919050565b6200065b836200061e565b620006736200066a8262000646565b848454620005b4565b825550505050565b600090565b6200068a6200067b565b6200069781848462000650565b505050565b5b81811015620006bf57620006b360008262000680565b6001810190506200069d565b5050565b601f8211156200070e57620006d88162000582565b620006e38462000597565b81016020851015620006f3578190505b6200070b620007028562000597565b8301826200069c565b50505b505050565b600082821c905092915050565b6000620007336000198460080262000713565b1980831691505092915050565b60006200074e838362000720565b9150826002028217905092915050565b620007698262000513565b67ffffffffffffffff81111562000785576200078462000284565b5b6200079182546200054d565b6200079e828285620006c3565b600060209050601f831160018114620007d65760008415620007c1578287015190505b620007cd858262000740565b8655506200083d565b601f198416620007e68662000582565b60005b828110156200081057848901518255600182019150602085019450602081019050620007e9565b868310156200083057848901516200082c601f89168262000720565b8355505b6001600288020188555050505b505050505050565b620008508162000408565b82525050565b60006020820190506200086d600083018462000845565b92915050565b61268d80620008836000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637b97008d1161010f578063a9059cbb116100a2578063dd62ed3e11610071578063dd62ed3e1461052d578063e69e8fe71461055d578063f2fde38b1461057b578063fce3cc7f14610597576101f0565b8063a9059cbb146104cb578063bac03cd7146104fb578063db1bed2214610519578063db242e6314610523576101f0565b80638e32e316116100de5780638e32e3161461045357806395d89b41146104715780639ad57e251461048f5780639dfc16a3146104ad576101f0565b80637b97008d146103f15780638456cb591461040d578063863eb85c146104175780638da5cb5b14610435576101f0565b80633f4ba83a1161018757806370a082311161015657806370a082311461037d578063715018a6146103ad57806373415dfb146103b757806379cc6790146103d5576101f0565b80633f4ba83a1461030957806342966c68146103135780635783d4a81461032f5780635c975abb1461035f576101f0565b806318160ddd116101c357806318160ddd1461027f57806323b872dd1461029d578063313ce567146102cd5780633e413bee146102eb576101f0565b8063047fc9aa146101f557806306fdde0314610213578063095ea7b3146102315780630c7d5cd814610261575b600080fd5b6101fd6105a1565b60405161020a9190611ba2565b60405180910390f35b61021b6105a8565b6040516102289190611c4d565b60405180910390f35b61024b60048036038101906102469190611cfe565b61063a565b6040516102589190611d59565b60405180910390f35b61026961065d565b6040516102769190611ba2565b60405180910390f35b610287610664565b6040516102949190611ba2565b60405180910390f35b6102b760048036038101906102b29190611d74565b61066e565b6040516102c49190611d59565b60405180910390f35b6102d561069d565b6040516102e29190611de3565b60405180910390f35b6102f36106a6565b6040516103009190611e5d565b60405180910390f35b6103116106cc565b005b61032d60048036038101906103289190611e78565b6106de565b005b61034960048036038101906103449190611e78565b6106f2565b6040516103569190611ba2565b60405180910390f35b610367610725565b6040516103749190611d59565b60405180910390f35b61039760048036038101906103929190611ea5565b61073c565b6040516103a49190611ba2565b60405180910390f35b6103b5610784565b005b6103bf610798565b6040516103cc9190611ba2565b60405180910390f35b6103ef60048036038101906103ea9190611cfe565b61079d565b005b61040b60048036038101906104069190611e78565b6107bd565b005b610415610b1c565b005b61041f610b2e565b60405161042c9190611ee1565b60405180910390f35b61043d610b54565b60405161044a9190611ee1565b60405180910390f35b61045b610b7e565b6040516104689190611ba2565b60405180910390f35b610479610b84565b6040516104869190611c4d565b60405180910390f35b610497610c16565b6040516104a49190611ba2565b60405180910390f35b6104b5610c1c565b6040516104c29190611ba2565b60405180910390f35b6104e560048036038101906104e09190611cfe565b610c32565b6040516104f29190611d59565b60405180910390f35b610503610c55565b6040516105109190611ba2565b60405180910390f35b610521610c5b565b005b61052b610e68565b005b61054760048036038101906105429190611efc565b610f78565b6040516105549190611ba2565b60405180910390f35b610565610fff565b6040516105729190611ba2565b60405180910390f35b61059560048036038101906105909190611ea5565b611005565b005b61059f61108b565b005b620f424081565b6060600380546105b790611f6b565b80601f01602080910402602001604051908101604052809291908181526020018280546105e390611f6b565b80156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b5050505050905090565b600080610645611223565b905061065281858561122b565b600191505092915050565b620f424081565b6000600254905090565b600080610679611223565b905061068685828561123d565b6106918585856112d1565b60019150509392505050565b60006012905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106d46113c5565b6106dc61144c565b565b6106ef6106e9611223565b826114af565b50565b6000620f42406009546107059190611fcb565b620f4240836107149190611fff565b61071e9190612070565b9050919050565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61078c6113c5565b6107966000611531565b565b601981565b6107af826107a9611223565b8361123d565b6107b982826114af565b5050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161081a9190611ee1565b602060405180830381865afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b91906120b6565b1161089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290612155565b60405180910390fd5b80600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016108f9929190612175565b602060405180830381865afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a91906120b6565b1161097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190612210565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016109d993929190612230565b6020604051808303816000875af11580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190612293565b506000610a28826106f2565b90506064601483610a399190611fff565b610a439190612070565b60066000828254610a549190611fcb565b925050819055506064605083610a6a9190611fff565b610a749190612070565b60076000828254610a859190611fcb565b925050819055508160086000828254610a9e9190611fcb565b925050819055508060096000828254610ab79190611fcb565b92505081905550610ac833826115f7565b3373ffffffffffffffffffffffffffffffffffffffff167f8fafebcaf9d154343dad25669bfa277f4fbacd7ac6b0c4fed522580e040a0f338383604051610b109291906122c0565b60405180910390a25050565b610b246113c5565b610b2c611679565b565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60095481565b606060048054610b9390611f6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbf90611f6b565b8015610c0c5780601f10610be157610100808354040283529160200191610c0c565b820191906000526020600020905b815481529060010190602001808311610bef57829003601f168201915b5050505050905090565b60075481565b600080610c2960196106f2565b90508091505090565b600080610c3d611223565b9050610c4a8185856112d1565b600191505092915050565b60085481565b6000610c65610c1c565b9050803073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ca19190611ee1565b602060405180830381865afa158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce291906120b6565b1015610d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1a9061235b565b60405180910390fd5b803073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d5f929190612175565b602060405180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906120b6565b1015610de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd8906123ed565b60405180910390fd5b610deb33826114af565b7f6ef4855b666dcc7884561072e4358b28dfe01feb1b7f4dcebc00e62d50394ac781604051610e1a9190611ba2565b60405180910390a13373ffffffffffffffffffffffffffffffffffffffff167f5671526f14382102dd869527930595699f52feafde5a004f82d18b4c5cdc3ab960405160405180910390a250565b610e706113c5565b600060065411610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac9061247f565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336006546040518363ffffffff1660e01b8152600401610f1492919061249f565b6020604051808303816000875af1158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190612293565b506000600681905550600654600854610f7091906124c8565b600881905550565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60065481565b61100d6113c5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361107f5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016110769190611ee1565b60405180910390fd5b61108881611531565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111129061256e565b60405180910390fd5b600060075411611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790612600565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336007546040518363ffffffff1660e01b81526004016111bf92919061249f565b6020604051808303816000875af11580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190612293565b50600060078190555060075460085461121b91906124c8565b600881905550565b600033905090565b61123883838360016116dc565b505050565b60006112498484610f78565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112cb57818110156112bb578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016112b293929190612620565b60405180910390fd5b6112ca848484840360006116dc565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113435760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161133a9190611ee1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113b55760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016113ac9190611ee1565b60405180910390fd5b6113c08383836118b3565b505050565b6113cd611223565b73ffffffffffffffffffffffffffffffffffffffff166113eb610b54565b73ffffffffffffffffffffffffffffffffffffffff161461144a5761140e611223565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114419190611ee1565b60405180910390fd5b565b6114546118cb565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611498611223565b6040516114a59190611ee1565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115215760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016115189190611ee1565b60405180910390fd5b61152d826000836118b3565b5050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116695760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016116609190611ee1565b60405180910390fd5b611675600083836118b3565b5050565b61168161190b565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116c5611223565b6040516116d29190611ee1565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361174e5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016117459190611ee1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117c05760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016117b79190611ee1565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156118ad578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516118a49190611ba2565b60405180910390a35b50505050565b6118bb6113c5565b6118c683838361194c565b505050565b6118d3610725565b611909576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611913610725565b1561194a576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61195461190b565b61195f838383611964565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119b65780600260008282546119aa9190611fcb565b92505081905550611a89565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a42578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611a3993929190612620565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ad25780600260008282540392505081905550611b1f565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611b7c9190611ba2565b60405180910390a3505050565b6000819050919050565b611b9c81611b89565b82525050565b6000602082019050611bb76000830184611b93565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bf7578082015181840152602081019050611bdc565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c1f82611bbd565b611c298185611bc8565b9350611c39818560208601611bd9565b611c4281611c03565b840191505092915050565b60006020820190508181036000830152611c678184611c14565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9f82611c74565b9050919050565b611caf81611c94565b8114611cba57600080fd5b50565b600081359050611ccc81611ca6565b92915050565b611cdb81611b89565b8114611ce657600080fd5b50565b600081359050611cf881611cd2565b92915050565b60008060408385031215611d1557611d14611c6f565b5b6000611d2385828601611cbd565b9250506020611d3485828601611ce9565b9150509250929050565b60008115159050919050565b611d5381611d3e565b82525050565b6000602082019050611d6e6000830184611d4a565b92915050565b600080600060608486031215611d8d57611d8c611c6f565b5b6000611d9b86828701611cbd565b9350506020611dac86828701611cbd565b9250506040611dbd86828701611ce9565b9150509250925092565b600060ff82169050919050565b611ddd81611dc7565b82525050565b6000602082019050611df86000830184611dd4565b92915050565b6000819050919050565b6000611e23611e1e611e1984611c74565b611dfe565b611c74565b9050919050565b6000611e3582611e08565b9050919050565b6000611e4782611e2a565b9050919050565b611e5781611e3c565b82525050565b6000602082019050611e726000830184611e4e565b92915050565b600060208284031215611e8e57611e8d611c6f565b5b6000611e9c84828501611ce9565b91505092915050565b600060208284031215611ebb57611eba611c6f565b5b6000611ec984828501611cbd565b91505092915050565b611edb81611c94565b82525050565b6000602082019050611ef66000830184611ed2565b92915050565b60008060408385031215611f1357611f12611c6f565b5b6000611f2185828601611cbd565b9250506020611f3285828601611cbd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f8357607f821691505b602082108103611f9657611f95611f3c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fd682611b89565b9150611fe183611b89565b9250828201905080821115611ff957611ff8611f9c565b5b92915050565b600061200a82611b89565b915061201583611b89565b925082820261202381611b89565b9150828204841483151761203a57612039611f9c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061207b82611b89565b915061208683611b89565b92508261209657612095612041565b5b828204905092915050565b6000815190506120b081611cd2565b92915050565b6000602082840312156120cc576120cb611c6f565b5b60006120da848285016120a1565b91505092915050565b7f4d7573742068617665205553446320746f20707572636861736520746f6b656e60008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061213f602183611bc8565b915061214a826120e3565b604082019050919050565b6000602082019050818103600083015261216e81612132565b9050919050565b600060408201905061218a6000830185611ed2565b6121976020830184611ed2565b9392505050565b7f4e6f7420656e6f75676820616c6c6f77616e636520746f20707572636861736560008201527f20746f6b656e7300000000000000000000000000000000000000000000000000602082015250565b60006121fa602783611bc8565b91506122058261219e565b604082019050919050565b60006020820190508181036000830152612229816121ed565b9050919050565b60006060820190506122456000830186611ed2565b6122526020830185611ed2565b61225f6040830184611b93565b949350505050565b61227081611d3e565b811461227b57600080fd5b50565b60008151905061228d81612267565b92915050565b6000602082840312156122a9576122a8611c6f565b5b60006122b78482850161227e565b91505092915050565b60006040820190506122d56000830185611b93565b6122e26020830184611b93565b9392505050565b7f4e6f7420656e6f75676820746f6b656e7320746f20707572636861736520737560008201527f62736372697074696f6e00000000000000000000000000000000000000000000602082015250565b6000612345602a83611bc8565b9150612350826122e9565b604082019050919050565b6000602082019050818103600083015261237481612338565b9050919050565b7f4e6f7420656e6f75676820616c6c6f77616e636520746f20707572636861736560008201527f20737562736372697074696f6e00000000000000000000000000000000000000602082015250565b60006123d7602d83611bc8565b91506123e28261237b565b604082019050919050565b60006020820190508181036000830152612406816123ca565b9050919050565b7f50726f746f636f6c2074726561737572792062616c616e6365206d757374206260008201527f652067726561746572207468616e203020746f20776974686472617700000000602082015250565b6000612469603c83611bc8565b91506124748261240d565b604082019050919050565b600060208201905081810360008301526124988161245c565b9050919050565b60006040820190506124b46000830185611ed2565b6124c16020830184611b93565b9392505050565b60006124d382611b89565b91506124de83611b89565b92508282039050818111156124f6576124f5611f9c565b5b92915050565b7f4f6e6c792063726561746f7220616464726573732063616e2063616c6c20746860008201527f69732066756e6374696f6e000000000000000000000000000000000000000000602082015250565b6000612558602b83611bc8565b9150612563826124fc565b604082019050919050565b600060208201905081810360008301526125878161254b565b9050919050565b7f436f6e74656e742043726561746f722062616c616e6365206d7573742062652060008201527f67726561746572207468616e203020746f207769746864726177000000000000602082015250565b60006125ea603a83611bc8565b91506125f58261258e565b604082019050919050565b60006020820190508181036000830152612619816125dd565b9050919050565b60006060820190506126356000830186611ed2565b6126426020830185611b93565b61264f6040830184611b93565b94935050505056fea2646970667358221220fdac02a5f511c2193f6d2d6f51174c67802bc15840e3c47d692198802f5709f964736f6c63430008140033a2646970667358221220a82792acf94a328893d1102c9d144d1b0ef331375ed7b763962268c7c0b3dd5f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}